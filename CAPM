import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt

# market interest rate
RISK_FREE_RATE = 0.05
# consider monthly returns and calculate annual return
MONTHS_IN_YEAR = 12


class CAPM:
    def __init__(self, stocks, start_date, end_date):
        self.stocks = stocks
        self.start_date = start_date
        self.end_date = end_date

    def download_data(self):
        # Create an empty DataFrame to store Adjusted Close prices
        data = pd.DataFrame()

        for stock in self.stocks:
            print(f"Downloading data for {stock}...")
            # Download historical data
            ticker_data = yf.download(stock, start=self.start_date, end=self.end_date)

            if not ticker_data.empty:
                # Append Adjusted Close data to the DataFrame
                data[stock] = ticker_data['Adj Close']
            else:
                print(f"Warning: No data available for {stock}. Skipping.")

        # Ensure there is data to return
        if data.empty:
            raise ValueError("No valid stock data downloaded. Check your tickers or date range.")

        return data

    def initialize(self):
        # Download the Adjusted Close data
        stock_data = self.download_data()

        # Resample the data to monthly frequency (last value of each month)
        stock_data = stock_data.resample('M').last()

        self.data = pd.DataFrame({'s_adjclose': stock_data[self.stocks[0]],
                                  'm_adjclose': stock_data[self.stocks[1]]})

        # logarithmic monthly returns
        self.data[['s_returns', 'm_returns']] = np.log(self.data[['s_adjclose', 'm_adjclose']]) / self.data[
            ['s_adjclose', 'm_adjclose']].shift(1)

        # remove the NaN values
        self.data = self.data[1:]
        print(self.data)

    def calculate_beta(self):
        # covariance matrix: the diagonal items are the variances
        # off diagonals are the covariances
        # the matrix is symmetric: cov[0,1] = cov[1,0] !!!
        covariance_matrix = np.cov(self.data["s_returns"], self.data["m_returns"])
        # calculating beta according to the formula. [0,1] is IBM cov & S&P cov,
        # [1,1] is variance of S&P
        beta = covariance_matrix[0, 1] / covariance_matrix[1, 1]
        print("Beta from formula: ", beta)

    def regression(self):
        # using linear regression to fit a line to the data
        # [stock_returns, market_returns] - slope is the beta
        beta, alpha = np.polyfit(self.data['m_returns'], self.data['s_returns'], deg=1)
        print("Beta from regression:", beta)
        # calculate the expected return according to the CAPM formula
        # we are after the annual return (this is why multiply by 12)
        expected_return = RISK_FREE_RATE * beta * (self.data['m_returns'].mean() * MONTHS_IN_YEAR
                                                   - RISK_FREE_RATE)
        print("Expected return: ", expected_return)
        self.plot_regression(alpha, beta)

    def plot_regression(self, alpha, beta):
        fig, axis = plt.subplots(1, figsize=(20, 10))
        axis.scatter(self.data['m_returns'], self.data['s_returns'], label='Data points')
        axis.plot(self.data['m_returns'], beta * self.data['m_returns'] + alpha, color='red', label='CAPM Line')
        plt.title('Capital Asset Pricing Model, finding alphas and betas')
        plt.xlabel('Market return $R_m$', fontsize=18)
        plt.ylabel('Stock return $R_a$', fontsize = 18)
        plt.text(0.08, 0.05, r'$R_a = \beta * R_m + \alpha$', fontsize=18)
        plt.legend()
        plt.grid(True)
        plt.show()


if __name__ == '__main__':
    # Initialize with IBM and S&P 500 data
    capm = CAPM(['DIS', '^GSPC'], '2019-12-11', '2024-12-12')
    capm.initialize()
    capm.calculate_beta()
    capm.regression()
